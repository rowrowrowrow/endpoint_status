<?php

use Drupal\endpoint_status\Controller\EndpointStatusListBuilder;

/**
 * @file
 * Demonstrates use of the Cron API in Drupal - hook_cron().
 */

/**
 * @defgroup endpoint_status Endpoint Status Cron
 * @ingroup endpoint_status
 * @{
 * Example using Cron API, including hook_cron() and @QueueWorker plugins
 *
 * This example is part of the Examples for Developers Project
 * which you can download and experiment with at
 * http://drupal.org/project/examples
 */

/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 * In this example, we log a message after the time given in the state value
 * 'endpoint_status.next_execution'. Then we update that variable to a time in the
 * future.
 */
function endpoint_status_cron() {
  // We access our configuration.
  $cron_config = \Drupal::config('endpoint_status.settings');
  // Default to a minute interval. Of course, cron has to be running at least
  // every minute for this to work.
  $interval = $cron_config->get('interval');
  $interval = !empty($interval) ? $interval : 60;

  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in the site state.
  $next_execution = \Drupal::state()->get('endpoint_status.next_execution', 0);
  $request_time = \Drupal::time()->getRequestTime();

  if ($request_time >= $next_execution) {

    $items = \Drupal::entityTypeManager()->getStorage('endpoint_status')->loadByProperties([
      'enabled' => TRUE,
    ]);
    $queue = \Drupal::queue('endpoint_status_queue');

    foreach ($items as $item) {
      $queue->createItem($item);
    }

    \Drupal::logger('endpoint_status')->notice('endpoint_status cron ran for all enabled items');
    if (\Drupal::state()->get('endpoint_status_show_status_message')) {
      \Drupal::messenger()->addMessage(t('endpoint_status cron executed at %time', ['%time' => date('c')]));
      \Drupal::state()->set('endpoint_status_show_status_message', FALSE);
    }
    \Drupal::state()->set('endpoint_status.next_execution', $request_time + $interval);
  }
}


/**
 * @ingroup endpoint_status
 * Implements hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from MailManager::mail(). The
 * goal of hook_mail() is to set the message's 'subject' and 'body' properties,
 * as well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of MailManager::mail(). So
 * it's a callback of a type, but not a hook.
 */
function endpoint_status_mail($key, &$message, $params) {
  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    default:
      $endpointStatus = $params['endpoint_status'];
      $from = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Endpoint Status Update from @site-name', ['@site-name' => $from], $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@label (@id) has been updated:', [
        '@label' => $endpointStatus->label(),
        '@id' => $endpointStatus->id(),
      ], $options);
      $message['body'][] = t('Short Status:', [], $options);
      $message['body'][] = t('@status', ['@status' => $endpointStatus->get('status')], $options);
      $message['body'][] = t('Detailed Message:', [], $options);
      $message['body'][] = t('@message', ['@message' => $endpointStatus->get('message')], $options);
      break;
  }
}

/**
 * @} End of "defgroup endpoint_status".
 */
